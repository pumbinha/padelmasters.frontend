---
import Enroll from "@/components/Enroll";
import { TranslationKey } from "@/i18n/ui";
import { useTranslations } from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import { ChampionshipStatus, type ChampionshipResponse } from "@/services/api";
import { getApi, getFormattedDate, getRequestParams } from "@/services/utils";
import { getSession } from "auth-astro/server";
const t = useTranslations(Astro.url);

const { id } = Astro.params;

const session = await getSession(Astro.request);

const api = getApi();

let championship: ChampionshipResponse = {};

try {
	// my validation
	if (!id) {
		Astro.redirect("/championships/not-found");
	}

	const championshipResponse = await api.api.padelmastersApiDomainChampionshipsGetChampionship(
		id || "",
		getRequestParams(session)
	);

	if (championshipResponse.ok) {
		championship = championshipResponse.data;
	} else {
		// 404
		Astro.redirect("/championships/not-found");
	}
} catch (e) {
	console.error(e);
}

const getStatusClass = (status: ChampionshipStatus | null | undefined) => {
	switch (status) {
		case ChampionshipStatus.Created:
			return "bg-gray-200 text-black-800";
		case ChampionshipStatus.Open:
			return "bg-blue-200 text-blue-800";
		case ChampionshipStatus.Started:
			return "bg-yellow-200 text-yellow-800";
		case ChampionshipStatus.Cancelled:
			return "bg-red-200 text-red-800";
		case ChampionshipStatus.Finished:
			return "bg-green-200 text-green-800";
		default:
			return "";
	}
};
---

<Layout title="Padel Masters - Championship">
	<section class="w-full pt-2 md:pt-2 lg:pt-2">
		<div class="overflow-hidden rounded-lg bg-background shadow-md">
			<div class="p-4">
				<h2 class="mb-2 text-xl font-bold">
					{championship.Name}
				</h2>
				<p class="mb-4 text-muted-foreground">{championship.Description}</p>
				<div class="mb-4 flex items-center justify-between">
					<div>
						<span class="font-medium">{t(TranslationKey.ChampionshipsStartDate)}:</span>{" "}
						{getFormattedDate(championship.StartDate)}
					</div>
					<div>
						<span class="font-medium">{t(TranslationKey.ChampionshipsEndDate)}:</span>{" "}
						{getFormattedDate(championship.EndDate)}
					</div>
				</div>
				<div class="flex items-center justify-between">
					<span
						class={`rounded-full px-2 py-1 text-xs font-medium ${getStatusClass(championship.Status)}`}
					>
						{championship.Status}
					</span>
				</div>
			</div>
			<div class="w-full rounded-lg bg-background md:w-auto">
				<Enroll client:load championshipId={id || ""} , text="Enroll" />
			</div>
		</div>
		<div class="p-12">
			<a
				href={`/championships/${id}/A`}
				class="text-m rounded-md bg-vivid-800 px-6 py-2 text-primary-foreground transition-colors hover:bg-vivid-900"
			>
				League Standings (temp)
			</a>
		</div>
	</section>
</Layout>
