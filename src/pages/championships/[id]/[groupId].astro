---
import BreadCrumb from "@/components/BreadCrumb.astro";
import Tabs from "@/components/ui/Tabs";
import { getStandingRowClass, getWinnerLoserSetClass } from "@/components/ui/utils";
import { TranslationKey } from "@/i18n/ui";
import { useTranslations } from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import {
	GroupType,
	MatchStatus,
	type ChampionshipDto,
	type GroupDetailDto,
	type GroupDto,
	type GroupMatchDto,
	type PlayerStandingDto,
} from "@/services/api";
import { generateGroupMatchDto } from "@/services/mocks";
import { getApi, getRequestParams, orderPlayerStandingDtoByPts } from "@/services/utils";
import { StarIcon } from "@heroicons/react/16/solid";
import { CalendarDaysIcon, ChartBarIcon } from "@heroicons/react/24/outline";
import { getSession } from "auth-astro/server";

const { id, groupId } = Astro.params;

const session = await getSession(Astro.request);
const t = useTranslations(session);

const api = getApi();

let group: GroupDto = {};
let championship: ChampionshipDto = {};
let groupDetail: GroupDetailDto = {};
let playerStandings: PlayerStandingDto[] = [];
let matches: GroupMatchDto[] = [];

try {
	if (!id) {
		Astro.redirect("/championships/not-found");
	}

	// ========= get group
	const groupResponse = await api.api.padelmastersApiDomainEndpointsGroupsGetGroup(
		groupId || "",
		getRequestParams(session)
	);

	if (groupResponse.ok) {
		group = groupResponse.data.Group?.Group || {};
		championship = groupResponse.data.Group?.Championship || {};
		groupDetail = groupResponse.data.Group?.GroupDetail || {};
	} else {
		// 404
		Astro.redirect("/group/not-found");
	}

	// ========= get standings
	if (groupDetail.NumberPlayers && groupDetail.NumberPlayers > 0) {
		const standingsResponse = await api.api.padelmastersApiDomainEndpointsGroupsGetGroupStandings(
			groupId || "",
			getRequestParams(session)
		);
		if (standingsResponse.ok) {
			playerStandings = standingsResponse.data.PlayerStandings || [];
			playerStandings = orderPlayerStandingDtoByPts(playerStandings);
		} else {
			// 404
			Astro.redirect("/not-found");
		}
	}

	// ========= get matches
	if (groupDetail.NumberPlayers && groupDetail.NumberPlayers > 0) {
		const standingsResponse = await api.api.padelmastersApiDomainEndpointsGroupsGetGroupMatches(
			groupId || "",
			getRequestParams(session)
		);
		if (standingsResponse.ok) {
			matches = standingsResponse.data || [];
			console.log(generateGroupMatchDto(15));
		} else {
			// 404
			Astro.redirect("/not-found");
		}
	}
} catch (e) {
	console.error(e);
}

const tabData = [
	{ name: t(TranslationKey.MatchesTitle), icon: CalendarDaysIcon, current: true },
	{ name: t(TranslationKey.StandingsTitle), icon: ChartBarIcon, current: false },
];
---

<Layout title=`Group ${group.Name} `>
	<section class="w-full pt-2 md:pt-2 lg:pt-2">
		<div class="overflow-hidden rounded-lg bg-background shadow-md">
			<div class="px-4">
				<BreadCrumb
					pages={[
						{ name: "Championships", href: "/championships" },
						{ name: championship.Name, href: `/championships/${id}` },
					]}
				/>
			</div>

			<div class="p-4">
				<div class="mb-2 flex items-center">
					<h2 class="mb-2 text-xl font-bold">
						{group.Name}
					</h2>
				</div>
				<p class="mb-4 text-muted-foreground">{group.Description}</p>

				<div class="grid grid-cols-2 gap-4">
					<div class="flex flex-col gap-1">
						<p class="text-xs font-normal text-neutral-600">{t(TranslationKey.NumberOfPlayers)}</p>
						<p class="text-sm font-medium text-neutral-800">{groupDetail.NumberPlayers}</p>
					</div>
					<div class="flex flex-col gap-1">
						<p class="text-xs font-normal text-neutral-600">
							{t(TranslationKey.NumberMatches)}
						</p>
						<p class="text-sm font-medium text-neutral-800">{groupDetail.NumberMatches}</p>
					</div>
					<div class="flex flex-col gap-1">
						<p class="text-xs font-normal text-neutral-600">
							{t(TranslationKey.PlayedMatches)}
						</p>
						<p class="text-sm font-medium text-neutral-800">
							{groupDetail.NumberOfPlayedMatches}
						</p>
					</div>
					<div class="flex flex-col gap-1">
						<p class="text-xs font-normal text-neutral-600">
							{t(TranslationKey.PendingMatches)}
						</p>
						<p class="text-sm font-medium text-neutral-800">
							{groupDetail.NumberOfPendingMatches}
						</p>
					</div>
				</div>
			</div>
		</div>

		<div class="border-b border-gray-200">
			<Tabs tabs={tabData} client:load />
		</div>

		<div class="p-4">
			<div class="inline-block min-w-full divide-y py-2 align-middle sm:px-6 lg:px-8">
				<div id="tab-0">
					{
						matches.map((match) => (
							<div class="py-4">
								<div>
									<div>
										<span
											class={`rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset ${match.Status === MatchStatus.Played ? "bg-green-50 text-green-600 ring-gray-600/20" : "bg-gray-50 text-neutral-600 ring-gray-600/20"}`}
										>
											{match.Status}
										</span>
										<span class="ml-4 text-xs font-light text-neutral-500">
											{match.Date || new Date().toLocaleString()}
										</span>
									</div>
								</div>
								<div>
									<table class="min-w-full">
										<thead>
											<tr>
												<th
													scope="col"
													class="pl-4 pr-3 text-left text-sm font-medium text-gray-900 sm:pl-0"
												/>
												<th />
												<th class="w-1 px-3 text-right text-sm font-semibold text-gray-900" />
												<th class="w-1 px-3 text-right text-sm font-semibold text-gray-900" />
												<th class="w-1 px-3 text-right text-sm font-semibold text-gray-900" />
											</tr>
										</thead>
										<tbody>
											<tr>
												<td
													class={`font-base whitespace-nowrap py-4 pl-4 pr-3 text-sm ${match.Team1?.IsWinner ? "font-semibold text-primary-600" : "text-gray-900"}`}
												>
													{match.Team1?.Team?.Player1?.FirstName}{" "}
													{match.Team1?.Team?.Player1?.LastName}
													<br />
													{match.Team1?.Team?.Player2?.FirstName}{" "}
													{match.Team1?.Team?.Player2?.LastName}
												</td>
												<td>
													<span class="mr-2 h-2 w-2 rounded-full bg-yellow-500" />
												</td>
												<td class={`${getWinnerLoserSetClass(1, match.ResultSet1)} border-b-2`}>
													{match.ResultSet1 ? match.ResultSet1.ResultTeam1 : ""}
												</td>
												<td class={`${getWinnerLoserSetClass(1, match.ResultSet2)} border-b-2`}>
													{match.ResultSet2 ? match.ResultSet2.ResultTeam1 : ""}
												</td>
												<td class={`${getWinnerLoserSetClass(1, match.ResultSet3)} border-b-2`}>
													{match.ResultSet3 ? match.ResultSet3.ResultTeam1 : ""}
												</td>
											</tr>
											<tr>
												<td
													class={`font-base whitespace-normal py-4 pb-2 pl-4 pr-3 text-sm ${match.Team2?.IsWinner ? "text-primary-600" : "text-gray-900"}`}
												>
													{match.Team2?.Team?.Player1?.FirstName}{" "}
													{match.Team2?.Team?.Player1?.LastName}
													<br />
													{match.Team2?.Team?.Player2?.FirstName}{" "}
													{match.Team2?.Team?.Player2?.LastName}
												</td>
												<td>
													<span class="mr-2 h-2 w-2 rounded-full bg-yellow-500" />
												</td>
												<td class={`${getWinnerLoserSetClass(2, match.ResultSet1)}`}>
													{match.ResultSet1 ? match.ResultSet1.ResultTeam2 : ""}
												</td>
												<td class={`${getWinnerLoserSetClass(2, match.ResultSet2)}`}>
													{match.ResultSet2 ? match.ResultSet2.ResultTeam2 : ""}
												</td>
												<td class={` ${getWinnerLoserSetClass(2, match.ResultSet3)}`}>
													{match.ResultSet3 ? match.ResultSet3.ResultTeam2 : ""}
												</td>
											</tr>
										</tbody>
									</table>
								</div>
							</div>
						))
					}
				</div>
				<div
					id="tab-1"
					style="display: none;"
					class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8"
				>
					<div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
						<table class="min-w-full divide-y divide-gray-300">
							<thead>
								<tr>
									<th
										scope="col"
										class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-0"
									>
										<div>{t(TranslationKey.StandingsName)}</div>
									</th>
									<th
										scope="col"
										class="px-3 py-3.5 text-right text-sm font-semibold text-gray-900"
									>
										<div class="lg:hidden">{t(TranslationKey.StandingsPlayedShort)}</div>
										<div class="max-lg:hidden">{t(TranslationKey.StandingsPlayedLong)}</div>
									</th>
									<th
										scope="col"
										class="px-3 py-3.5 text-right text-sm font-semibold text-gray-900"
									>
										<div class="lg:hidden">{t(TranslationKey.StandingsVictoryShort)}</div>
										<div class="max-lg:hidden">{t(TranslationKey.StandingsVictoryLong)}</div>
									</th>
									<th
										scope="col"
										class="px-3 py-3.5 text-right text-sm font-semibold text-gray-900"
									>
										<div class="lg:hidden">{t(TranslationKey.StandingsLostShort)}</div>
										<div class="max-lg:hidden">{t(TranslationKey.StandingsLostLong)}</div>
									</th>
									<th
										scope="col"
										class="px-3 py-3.5 text-right text-sm font-semibold text-gray-900"
									>
										<div class="lg:hidden">{t(TranslationKey.StandingsPointShort)}</div>
										<div class="max-lg:hidden">{t(TranslationKey.StandingsPointLong)}</div>
									</th>
								</tr>
							</thead>
							<tbody class="divide-y">
								{
									playerStandings.map((player, index) => (
										<tr
											class={`${getStandingRowClass(group.GroupType || GroupType.League, index, groupDetail.NumberOfFinalists)}`}
										>
											<td
												class={`font-base whitespace-nowrap py-4 pl-4 pr-3 text-sm text-gray-900 sm:pl-0`}
											>
												<span class="inline-block align-middle">
													<a href={`/players/${player.UserId}`} class="hover: text-primary-800">
														<span class="decoration-primary-500">
															{index + 1}. {player.DisplayName}
														</span>
													</a>
												</span>
												{(group.GroupType || GroupType.League) === GroupType.Americano &&
													((index === 0 && (
														<StarIcon
															aria-hidden="true"
															className="ml-auto h-4 w-4 text-yellow-400  inline-block align-middle"
														/>
													)) ||
														(index === 1 && (
															<StarIcon
																aria-hidden="true"
																className="ml-auto h-4 w-4 text-gray-400 inline-block align-middle "
															/>
														)) ||
														(index === 2 && (
															<StarIcon
																aria-hidden="true"
																className="ml-auto h-4 w-4 text-orange-700 inline-block align-middle"
															/>
														)))}
											</td>
											<td class="whitespace-nowrap px-3 py-4 text-right align-middle text-sm text-gray-500">
												{player.PlayedMatches}
											</td>
											<td class="whitespace-nowrap px-3 py-4 text-right align-middle text-sm text-gray-500">
												{player.WonMatches}
											</td>
											<td class="whitespace-nowrap px-3 py-4 text-right align-middle text-sm text-gray-500">
												{player.LostMatches}
											</td>
											<td class="whitespace-nowrap px-3 py-4 text-right align-middle text-sm font-semibold text-gray-500">
												{player.Points}
											</td>
										</tr>
									))
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</section>
</Layout>

<script>
	import { activeTab } from "@/stores/groupsTabsStore";

	// Listen to changes in the store, and show/hide the dialog accordingly
	activeTab.subscribe((index) => {
		console.log(index);
		if (index === 0) {
			document.getElementById("tab-0").style.display = "block";
			document.getElementById("tab-1").style.display = "none";
		} else {
			document.getElementById("tab-1").style.display = "block";
			document.getElementById("tab-0").style.display = "none";
		}
	});
</script>
