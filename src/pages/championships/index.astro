---
import { TranslationKey } from "@/i18n/ui"
import { useTranslations } from "@/i18n/utils"
import Layout from "@/layouts/Layout.astro"
import { type ChampionshipResponse, ChampionshipStatus } from "@/services/api"
import { getApi, getFormattedDate, getRequestParams } from "@/services/utils"
import { getSession } from "auth-astro/server"
const t = useTranslations(Astro.url)

const session = await getSession(Astro.request)

const api = getApi()

let championships: ChampionshipResponse[] = []

try {
	const championshipResponse = await api.api.padelmastersApiDomainChampionshipsGetChampionships(
		getRequestParams(session)
	)
	if (championshipResponse.ok) {
		championships = championshipResponse.data
	} else {
		console.error("championshipResponse")
	}
} catch (e) {
	console.error(e)
}

const getStatusClass = (status: ChampionshipStatus | null | undefined) => {
	switch (status) {
		case ChampionshipStatus.Created:
			return "bg-gray-200 text-black-800"
		case ChampionshipStatus.Open:
			return "bg-blue-200 text-blue-800"
		case ChampionshipStatus.Started:
			return "bg-yellow-200 text-yellow-800"
		case ChampionshipStatus.Cancelled:
			return "bg-red-200 text-red-800"
		case ChampionshipStatus.Finished:
			return "bg-green-200 text-green-800"
		default:
			return ""
	}
}
---

<Layout title="Padel Masters - Championships">
	<section class="w-full pt-2 md:pt-2 lg:pt-2">
		<div class="w-full rounded-lg bg-background p-6 shadow-lg">
			<div class="mb-6 flex items-center justify-between">
				<h1 class="text-2xl font-bold text-foreground">{t(TranslationKey.ChampionshipsTitle)}</h1>
				<div class="flex items-center space-x-4">
					<a
						href="/championships/add"
						class="inline-flex h-9 items-center justify-center rounded-md bg-primary px-6 py-3 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
						>{t(TranslationKey.ChampionshipsAdd)}</a
					>
				</div>
			</div>
			{
				championships.length === 0 && (
					<div class="w-full max-w-md rounded-lg bg-background p-6 text-center shadow-md">
						<h2 class="mb-2 text-xl font-bold">
							{t(TranslationKey.ChampionshipsNoChampionshipstitle)}
						</h2>
						<p class="text-muted-foreground">
							{t(TranslationKey.ChampionshipsNoChampionshipsDescription)}
						</p>
					</div>
				)
			}

			<div class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
				{
					championships.map((championship) => {
						return (
							<div class="overflow-hidden rounded-lg bg-background shadow-md">
								<div class="p-4">
									<h2 class="mb-2 text-xl font-bold">{championship.name}</h2>
									<p class="mb-4 text-muted-foreground">{championship.description}</p>
									<div class="mb-4 flex items-center justify-between">
										<div>
											<span class="font-medium">{t(TranslationKey.ChampionshipsStartDate)}:</span>{" "}
											{getFormattedDate(championship.startDate)}
										</div>
										<div>
											<span class="font-medium">{t(TranslationKey.ChampionshipsEndDate)}:</span>{" "}
											{getFormattedDate(championship.endDate)}
										</div>
									</div>
									<div class="flex items-center justify-between">
										<span
											class={`rounded-full px-2 py-1 text-xs font-medium ${getStatusClass(championship.status)}`}
										>
											{championship.status}
										</span>
									</div>
								</div>
							</div>
						)
					})
				}
			</div>
		</div>
	</section>
</Layout>
