---
import Tabs from "@/components/Tabs.astro";
import Toast from "@/components/ui/Toast";
import { getWinnerLoserSetClass } from "@/components/ui/utils";
import UsersLink from "@/components/UsersLink.astro";
import { TranslationKey } from "@/i18n/ui";
import { useTranslations } from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import PlayerHeader from "@/sections/PlayerHeader.astro";
import {
	MatchStatus,
	type GroupMatchDto,
	type UserDto,
	type UserStatisticsDto,
} from "@/services/api";
import {
	getApi,
	getFormattedDate,
	getRequestParams,
	orderGroupMatchSearchDtoByDate,
} from "@/services/utils";
import { CalendarDaysIcon, ChartBarIcon } from "@heroicons/react/24/outline";
import { getSession } from "auth-astro/server";

const { id } = Astro.params;

const session = await getSession(Astro.request);
const t = useTranslations(session);

const api = getApi();
let errorMessage = "";

let user: UserDto = {};

let userStatistics: UserStatisticsDto = {};
let userMatches: GroupMatchDto[] = [];

try {
	if (!id) {
		Astro.redirect("/championships/not-found");
	}

	const userResponse = await api.api.padelmastersApiDomainEndpointsUsersGetUser(
		id || "",
		getRequestParams(session)
	);

	if (userResponse.ok) {
		user = userResponse.data.User || {};
		userStatistics = userResponse.data.UserStatistics || {};
		userMatches = userResponse.data.UserMatches || [];
		userMatches = orderGroupMatchSearchDtoByDate(userMatches);
	} else {
		// 404
		Astro.redirect("/championships/not-found");
	}
} catch (e) {
	console.error(e);
	errorMessage = t(TranslationKey.ErrorLoadingData);
}

const tabData = [
	{
		name: t(TranslationKey.MatchesTitle),
		url: `/players/${id}`,
		icon: CalendarDaysIcon,
		isCurrent: true,
	},

	{
		name: t(TranslationKey.RankingTitle),
		url: `/players/${id}/ranking`,
		icon: ChartBarIcon,
		isCurrent: false,
	},
];
---

<Layout title=`Player - ${user.FirstName} ${user.LastName} `>
	<section class="w-full pt-2 md:pt-2 lg:pt-2">
		<PlayerHeader user={user} userStatistics={userStatistics} />
		<Tabs tabData={tabData} />
		<div class="p-4">
			<div class="inline-block min-w-full divide-y py-2 align-middle sm:px-6 lg:px-8">
				{
					userMatches.map((match) => (
						<div class="py-4">
							<div>
								<div>
									<span
										class={`rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset ${match.Status === MatchStatus.Played ? "bg-green-50 text-green-600 ring-gray-600/20" : "bg-gray-50 text-neutral-600 ring-gray-600/20"}`}
									>
										{match.Status}
									</span>
									<span class="ml-4 text-xs font-light text-neutral-500">
										{getFormattedDate(match.Date, session)}
									</span>
								</div>
							</div>
							<div>
								<table class="min-w-full">
									<thead>
										<tr>
											<th
												scope="col"
												class="pl-4 pr-3 text-left text-sm font-medium text-gray-900 sm:pl-0"
											/>

											{match.MatchResults?.map((result) => {
												return (
													<th class="w-1 px-3 text-right text-sm font-semibold text-gray-900" />
												);
											})}
										</tr>
									</thead>
									<tbody>
										<tr>
											<td
												class={`font-base whitespace-nowrap py-4 pl-4 pr-3 text-sm ${match.Team1?.IsWinner ? "font-semibold text-primary-600 hover:text-primary-400" : "text-gray-900"}`}
											>
												<UsersLink
													userId={match.Team1?.Team?.Player1?.Id || ""}
													displayName={`${match.Team1?.Team?.Player1?.FirstName} ${match.Team1?.Team?.Player1?.LastName}`}
													class={`${match.Team1?.Team?.Player1?.Id === id ? "font-semibold text-primary-600 hover:text-primary-400" : "text-gray-900"}`}
												/>

												<br />
												<UsersLink
													userId={match.Team1?.Team?.Player2?.Id || ""}
													displayName={`${match.Team1?.Team?.Player2?.FirstName} ${match.Team1?.Team?.Player2?.LastName}`}
													class={`${match.Team1?.Team?.Player2?.Id === id ? "font-semibold text-primary-600 hover:text-primary-400" : "text-gray-900"}`}
												/>
											</td>

											{match.MatchResults?.map((result) => {
												return (
													<td class={`${getWinnerLoserSetClass(1, result)} border-b-2`}>
														{result ? result.ResultTeam1 : ""}
													</td>
												);
											})}
										</tr>
										<tr>
											<td
												class={`font-base whitespace-normal py-4 pb-2 pl-4 pr-3 text-sm ${match.Team2?.IsWinner ? "text-primary-600" : "text-gray-900"}`}
											>
												<UsersLink
													userId={match.Team2?.Team?.Player1?.Id || ""}
													displayName={`${match.Team2?.Team?.Player1?.FirstName} ${match.Team2?.Team?.Player1?.LastName}`}
													class={`${match.Team2?.Team?.Player1?.Id === id ? "font-semibold text-primary-600 hover:text-primary-400" : "text-gray-900"}`}
												/>

												<br />
												<UsersLink
													userId={match.Team2?.Team?.Player2?.Id || ""}
													displayName={`${match.Team2?.Team?.Player2?.FirstName} ${match.Team2?.Team?.Player2?.LastName}`}
													class={`${match.Team2?.Team?.Player2?.Id === id ? "font-semibold text-primary-600 hover:text-primary-400" : "text-gray-900"}`}
												/>
											</td>

											{match.MatchResults?.map((result) => {
												return (
													<td class={`${getWinnerLoserSetClass(2, result)} `}>
														{result ? result.ResultTeam2 : ""}
													</td>
												);
											})}
										</tr>
									</tbody>
								</table>
							</div>
						</div>
					))
				}
			</div>
		</div>
		{errorMessage && <Toast message={errorMessage} type="error" client:load />}
	</section>
</Layout>
